/**
 * Authors: Rick Vogel, Philipp Thomasberger
 * Created: 23.09.2015
 */

#ifndef UTILS_H_
#define UTILS_H_

#include "mb96348hs.h"

// definitions to increase readability
#define LCD_PORT_DB		PDR01
#define LCD_PIN_DI		PDR02_P0
#define LCD_PIN_RW		PDR02_P1
#define LCD_PIN_E		PDR02_P2
#define LCD_PIN_CS1		PDR02_P3
#define LCD_PIN_CS2		PDR02_P4
#define LCD_PIN_RESET	PDR02_P5
// LCD parameter
#define LCD_T			10l
#define LCD_WIDTH		128
#define LCD_HEIGHT		64

// framebuffer
unsigned char lcd_buffer[128][8];

unsigned char splash[1024] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0x8F,0xFF,0xFF,0xFF,0x3F,0xFC,0xFF,0xFF,0x07,0xFF,0xFF,0xFF,0x1F,0xF8,0xFF,0xFF,0x03,0xFE,0xFF,0xFF,0x1F,0xF0,0xFF,0xFF,0x01,0xFE,0xFF,0xFF,0x1F,0xE0,0xFF,0xFF,0x00,0xFE,0xFF,0xFF,0x1F,0xC0,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0x3F,0x80,0xFF,0x7F,0x80,0xFF,0xFF,0xFF,0x7F,0x00,0xFF,0x3F,0xC0,0xFF,0xFF,0xFF,0xFF,0x00,0xFE,0x1F,0xC0,0xFF,0xFF,0xFF,0xFF,0x01,0xFE,0x0F,0xE0,0xFF,0xFF,0xFF,0xFF,0x03,0xFC,0x07,0xF0,0xFF,0xFF,0xFF,0xFF,0x07,0xF8,0x07,0xF8,0xFF,0xFF,0xFF,0xFF,0x07,0xF0,0x03,0xFC,0xFF,0xFF,0xFF,0xFF,0x0F,0xE0,0x01,0xFE,0xFF,0xFF,0xFF,0xFF,0x1F,0xC0,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x00,0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0xC0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x01,0xE0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x03,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xF8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFC,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0xFE,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

// wait for w cycles
void wait(long w) {
	long d;
	for (d = 0; d < w; ++d) {
		__wait_nop();
	}
}

void lcd_sendEnable(void) {
	LCD_PIN_E = 1;
	wait(LCD_T);
	LCD_PIN_E = 0;
	wait(LCD_T);
}

void lcd_clear(void) {
	long i, j;
	for (i = 0; i < 128; i++)
		for (j = 0; j < 8; j++)
			lcd_buffer[i][j] = 0;
}

void lcd_splash() {
	long i, j;
	for (i = 0; i < 128; i++)
		for (j = 0; j < 8; j++)
			lcd_buffer[i][j] = splash[i*8+j];
}

void lcd_flush(void) {
	char x, y;

	LCD_PIN_CS1 = 1;	// cs
	LCD_PIN_CS2 = 0;	// cs

	for (y = 0; y < 8; ++y) {
		// LCD: set y address to 'y', set x address to 0
		LCD_PIN_DI = 0;
		LCD_PORT_DB = (0xB8 | y);
		lcd_sendEnable();
		LCD_PORT_DB = (0x40 | 0);
		lcd_sendEnable();
		LCD_PIN_DI = 1;
		for (x = 0; x < 64; ++x) {
			LCD_PORT_DB = lcd_buffer[x][y]; // LCD: draw pixel -> column/x address is incremented automatically
			lcd_sendEnable();
		}
	}

	LCD_PIN_DI = 0;		// 0 = instruction
	LCD_PORT_DB = 0x3F;	// display on
	lcd_sendEnable();

	LCD_PIN_CS1 = 0;	// cs
	LCD_PIN_CS2 = 1;	// cs

	for (y = 0; y < 8; ++y) {
		// LCD: set y address to 'y', set x address to 0
		LCD_PIN_DI = 0;
		LCD_PORT_DB = (0xB8 | y);
		lcd_sendEnable();
		LCD_PORT_DB = (0x40 | 0);
		lcd_sendEnable();
		LCD_PIN_DI = 1;
		for (x = 0; x < 64; ++x) {
			LCD_PORT_DB = lcd_buffer[64 + x][y]; // LCD: draw pixel -> column/x address is incremented automatically
			lcd_sendEnable();
		}
	}
	LCD_PIN_DI = 0;		// 0 = instruction
	LCD_PORT_DB = 0x3F;	// display on
	lcd_sendEnable();
}

void lcd_drawPixel(char x, char y, char z) {
	if (z == 0)
		lcd_buffer[x][y / 8] = (lcd_buffer[x][y / 8] & (0xFF ^ (1 << (y % 8))));
	else
		lcd_buffer[x][y / 8] = (lcd_buffer[x][y / 8] | (1 << (y % 8)));
}

void lcd_drawPixelDirect(char x, char y, char z) {
	lcd_drawPixel(x,y,z);

	// instantly send new pixel to the display
	if (x < 64) {
		LCD_PIN_CS1 = 1;	// cs
		LCD_PIN_CS2 = 0;	// cs

		LCD_PIN_DI = 0;
		LCD_PORT_DB = (0xB8 | (y / 8));
		lcd_sendEnable();
		LCD_PORT_DB = (0x40 | x);
		lcd_sendEnable();
		LCD_PIN_DI = 1;

		LCD_PORT_DB = lcd_buffer[x][y / 8]; // LCD: draw pixel -> column/x address is incremented automatically
		lcd_sendEnable();

		LCD_PIN_DI = 0;		// 0 = instruction
		LCD_PORT_DB = 0x3F;	// display on
		lcd_sendEnable();
	} else {
		LCD_PIN_CS1 = 0;	// cs
		LCD_PIN_CS2 = 1;	// cs

		LCD_PIN_DI = 0;
		LCD_PORT_DB = (0xB8 | (y / 8));
		lcd_sendEnable();
		LCD_PORT_DB = (0x40 | (x - 64));
		lcd_sendEnable();
		LCD_PIN_DI = 1;

		LCD_PORT_DB = lcd_buffer[x][y / 8]; // LCD: draw pixel -> column/x address is incremented automatically
		lcd_sendEnable();

		LCD_PIN_DI = 0;		// 0 = instruction
		LCD_PORT_DB = 0x3F;	// display on
		lcd_sendEnable();
	}
}

// init I/O-ports
void initIO(void) {
	PDR00 = 0xff;
	DDR00 = 0xff;		// set port00 as output (right seven-segment display)
	PDR09 = 0xff;
	DDR09 = 0xff;		// set port09 as output (left seven-segment display)
	PDR07 = 0x00;
	DDR07 = 0xfc;		// set P07_0 and P07_1 as input (buttons) - 0xfc = 11111100 (bin)
	PIER07 = 0x03;		// enable input - 0x03 = 00000011 (bin)
}

// init LCD
void initLCD(void) {
	PDR01 = 0x00;
	DDR01 = 0xff;
	PDR02 = 0x00;
	DDR02 = 0xff;
	LCD_PIN_RESET = 1;	// RESET must be OFF (1)
	LCD_PIN_RW = 0;		// write always
}

// init UART
void InitUart1(void) {
	DDR08 &= 0xDF;	// set SIN1 as input
	PIER08 |= 0x20;	// enable port input

	//BGR1 = 5832;	//   9600 Baud @ 56MHz
	//BGR1 = 2916;	//  19200 Baud @ 56MHz
	BGR1 = 485;		// 115200 Baud @ 56MHz

	SCR1 = 0x17;	// 8N1
	SMR1 = 0x0d;	// enable SOT1, Reset, normal mode
	SSR1 = 0x00;	// LSB first
}

// sends a character to the UART
void Putch1(char ch) {
	while (SSR1_TDRE == 0);	// wait for transmit buffer empty
	TDR1 = ch;				// put ch into buffer
}

// Waits for and returns incoming character from the UART
unsigned char Getch1(void) {
	unsigned char rxchar;

	for (;;) {
		while (SSR1_RDRF == 0) {	// Wait for data received
			__wait_nop();
		}
		rxchar = RDR1;				// Save receive register
		if ((SSR1 & 0xE0) != 0) {	// Check for errors PE, ORE, FRE
			SCR1_CRE = 1;			// Clear error flags
		}
		else {
			return (rxchar);		// Return received character
		}
	}
	return 0;
}

// Puts a String to the UART
void Puts1(const char *Name2) {
	while (*Name2 != '\0') {		// go through string
		if (*Name2 == '\n')			// DOS-<Return>
			Putch1('\r');
		Putch1(*Name2++);
	}
}

#endif /* UTILS_H_ */
